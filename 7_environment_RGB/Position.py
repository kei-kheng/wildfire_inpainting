# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Position(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Position()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsPosition(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Position
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Position
    def HIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Position
    def WIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def PositionStart(builder):
    builder.StartObject(2)

def Start(builder):
    PositionStart(builder)

def PositionAddHIndex(builder, hIndex):
    builder.PrependInt32Slot(0, hIndex, 0)

def AddHIndex(builder, hIndex):
    PositionAddHIndex(builder, hIndex)

def PositionAddWIndex(builder, wIndex):
    builder.PrependInt32Slot(1, wIndex, 0)

def AddWIndex(builder, wIndex):
    PositionAddWIndex(builder, wIndex)

def PositionEnd(builder):
    return builder.EndObject()

def End(builder):
    return PositionEnd(builder)
