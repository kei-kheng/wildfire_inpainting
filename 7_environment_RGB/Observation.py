# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Observation(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Observation()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsObservation(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Observation
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Observation
    def Positions(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Position import Position
            obj = Position()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Observation
    def R(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # Observation
    def G(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # Observation
    def B(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

def ObservationStart(builder):
    builder.StartObject(4)

def Start(builder):
    ObservationStart(builder)

def ObservationAddPositions(builder, positions):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(positions), 0)

def AddPositions(builder, positions):
    ObservationAddPositions(builder, positions)

def ObservationAddR(builder, r):
    builder.PrependUint8Slot(1, r, 0)

def AddR(builder, r):
    ObservationAddR(builder, r)

def ObservationAddG(builder, g):
    builder.PrependUint8Slot(2, g, 0)

def AddG(builder, g):
    ObservationAddG(builder, g)

def ObservationAddB(builder, b):
    builder.PrependUint8Slot(3, b, 0)

def AddB(builder, b):
    ObservationAddB(builder, b)

def ObservationEnd(builder):
    return builder.EndObject()

def End(builder):
    return ObservationEnd(builder)
